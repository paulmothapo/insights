i want you to help me fix the polist to properly show the list of the posts accroding to theirs tags

sanity queries
import { groq } from 'next-sanity';

const postFields = groq`
  _id,
  title,
  date,
  _updatedAt,
  excerpt,
  coverImage,
  "slug": slug.current,
  "author": author->{name, picture},
  "tags": tags[]-> {name, "slug": slug.current},
`;

export const settingsQuery = groq`*[_type == "settings"][0]`;

export const indexQuery = groq`
*[_type == "post"] | order(date desc, _updatedAt desc) {
  ${postFields}
}`;

export const postAndMoreStoriesQuery = groq`
{
  "post": *[_type == "post" && slug.current == $slug] | order(_updatedAt desc) [0] {
    content,
    ${postFields}
  },
  "morePosts": *[_type == "post" && slug.current != $slug] | order(date desc, _updatedAt desc) [0...3] {
    content,
    ${postFields}
  }
}`;

export const postSlugsQuery = groq`
*[_type == "post" && defined(slug.current)][].slug.current
`;

export const postBySlugQuery = groq`
*[_type == "post" && slug.current == $slug][0] {
  ${postFields}
}
`;

export const tagsQuery = groq`
*[_type == "tag"] {
  _id,
  name,
  "slug": slug.current,
  "posts": *[_type == "post" && references(^._id)] {
    ${postFields}
  }
}
`;

export interface Tag {
  name?: string;
  slug?: string;
}

export interface Author {
  name?: string;
  picture?: any;
}

export interface Post {
  _id: string;
  title?: string;
  coverImage?: any;
  date?: string;
  _updatedAt?: string;
  excerpt?: string;
  author?: Author;
  slug?: string;
  content?: any;
  tags?: Tag[];
}

export interface Settings {
  title?: string;
  description?: any[];
  ogImage?: {
    title?: string;
  };
}


sanity client
import { groq } from 'next-sanity';

import { apiVersion, dataset, projectId, useCdn } from 'lib/sanity.api'
import {
  indexQuery,
  type Post,
  postAndMoreStoriesQuery,
  tagsQuery,
  postBySlugQuery,
  postSlugsQuery,
  type Settings,
  settingsQuery,
} from 'lib/sanity.queries'
import { createClient, type SanityClient } from 'next-sanity'

const postFields = groq`
  _id,
  title,
  date,
  _updatedAt,
  excerpt,
  coverImage,
  "slug": slug.current,
  "author": author->{name, picture},
  "tags": tags[]-> {name, "slug": slug.current},
`;

export function getClient(preview?: { token: string }): SanityClient {
  const client = createClient({
    projectId,
    dataset,
    apiVersion,
    useCdn,
    perspective: 'published',
  })
  if (preview) {
    if (!preview.token) {
      throw new Error('You must provide a token to preview drafts')
    }
    return client.withConfig({
      token: preview.token,
      useCdn: false,
      ignoreBrowserTokenWarning: true,
      perspective: 'previewDrafts',
    })
  }
  return client
}

export const getSanityImageConfig = () => getClient()

export async function getSettings(client: SanityClient): Promise<Settings> {
  return (await client.fetch(settingsQuery)) || {}
}

export async function getAllPosts(client: SanityClient): Promise<Post[]> {
  return (await client.fetch(indexQuery)) || []
}

export async function getAllPostsSlugs(): Promise<Pick<Post, 'slug'>[]> {
  const client = getClient()
  const slugs = (await client.fetch<string[]>(postSlugsQuery)) || []
  return slugs.map((slug) => ({ slug }))
}

export async function getPostBySlug(
  client: SanityClient,
  slug: string,
): Promise<Post> {
  return (await client.fetch(postBySlugQuery, { slug })) || ({} as any)
}

export async function getPostAndMoreStories(
  client: SanityClient,
  slug: string,
): Promise<{ post: Post; morePosts: Post[] }> {
  return await client.fetch(postAndMoreStoriesQuery, { slug })
}

// export async function getPostsByTag(
//   client: SanityClient,
//   slug: string,
// ): Promise<{ post: Post; industry: Post[] }> {
//   return await client.fetch(tagsQuery, { slug })
// }

export async function getPostsByTag(
  client: SanityClient,
  slug: string,
): Promise<{ tag: Post; industry: Post[] }> {
  const tag = await client.fetch(tagsQuery, { slug });
  const industry = await client.fetch(
    `
      *[_type == "post" && references(*[_type == "tag" && slug.current == $slug]._id)] | order(date desc, _updatedAt desc) {
        ${postFields}
      }
    `,
    { slug }
  );

  return { tag, industry };
}


TagPage
import React from 'react';
import { GetStaticProps } from 'next';
import { getClient, getPostsByTag, getSettings } from 'lib/sanity.client';

import type { Post, Settings } from 'lib/sanity.queries'
import { notFound } from 'next/navigation'
import { Analytics } from '@vercel/analytics/react';

import PostList from 'components/PostList';
import Container from 'components/BlogContainer'
import BlogHeader from 'components/BlogHeader'
import Layout from 'components/BlogLayout'
import MoreStories from './MoreStoriesHome'
import PostBody from 'components/PostBody'
import PostHeader from 'components/PostHeader'
import PostPageHead from 'components/PostPageHead'
import PostTitle from 'components/PostTitle'
import SectionSeparator from 'components/SectionSeparator'
import Header from 'components/NevbarNew'
import Footer from 'components/Footer'
import PdfDownloadButton from '../components/pdfDownload';

interface PageProps {
  industry: Post[];
  settings?: Settings;
  loading?: boolean
  preview?: boolean
}

const TagPage: React.FC<PageProps> = ({ industry, settings, loading, preview }) => {
  return (
    <>
    <Header/>
      <Layout preview={preview} loading={loading}>
        <Container>
            <div>
            <h1>Posts</h1>
            <PostList posts={industry} />
            </div>
            </Container>
        </Layout>
      <Analytics />
      <Footer/>
    </>
  );
};

export const getStaticProps: GetStaticProps<PageProps> = async (ctx) => {
  const { params = {} } = ctx;
  const client = getClient();

  const [settings, { tag, industry }] = await Promise.all([
    getSettings(client),
    getPostsByTag(client, params.tag as string), 
  ]);

  return {
    props: {
        industry,
        settings,
    },
  };
};

export default TagPage;


/industries/[tag].tsx
import { useRouter } from 'next/router';
import { GetStaticProps } from 'next';
import { getClient, getPostsByTag, getSettings } from 'lib/sanity.client';
import { Post, Settings } from 'lib/sanity.queries';

interface PageProps {
  industry: Post[];
  settings?: Settings;
}

export default function TagPage(props: PageProps) {
  const { industry, settings } = props;

  return (
    <div>
      {/* Render posts */}
      {industry.map(post => (
        <div key={post._id}>
          <h2>{post.title}</h2>
          {/* Render other post details */}
        </div>
      ))}
      {/* Also, include navigation to other tags or all posts */}
    </div>
  );
}

export const getStaticProps: GetStaticProps<PageProps> = async (ctx) => {
  const { params = {} } = ctx;
  const client = getClient();

  const [settings, { tag, industry }] = await Promise.all([
    getSettings(client),
    getPostsByTag(client, params.tag as string), 
  ]);

  return {
    props: {
      industry,
      settings,
    },
  };
};
